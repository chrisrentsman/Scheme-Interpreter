(append '(a b) '(c d))
(append '(a b c) '())
(append '() '())
(null? ())
(null? #f)
(null? (cdr '(a)))
(equal? 'a 'a)
(equal? 'a 'b)
(equal? '(a b) '(a b))
(equal? '(a (b c) d) '(a (b c) d))
(equal? '(a (b c) d) '(a (b c d) d))
(assoc 'joan '((john smith) (joan doe) (marcia law)))
(assoc 'john '((john smith) (joan doe) (marcia law)))
(assoc 'jean '((john smith) (joan doe) (marcia law)))
(assoc 'a '())
(assoc 'b '((c d) (e f)))
(assoc 'e '((c d) (e f)))
(define l1 '(a b c))
(define l2 '(d e f))
l1
l2
(append l1 l2)
l1
l2
(cond ((null? '()) (car '(a b)))
      (else (cdr '(a b))))
(cond ((null? '(a)) (car '(a b)))
      (else (cdr '(a b))))
(symbol? 'a)
(symbol? '(a b c))
(list? 'a)
(list? '(a b c))
(exit)
